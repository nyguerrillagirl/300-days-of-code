# This python script cleans up all node_modules folders
# The user provides the top-level folder/directory and this tool
# examines all child folders recursively searching for node_modules
# A file is optionally created that lists the location of node_modules folders
# that was cleaned out

# python cleanup_node_modules <top-level-folder> [-f]  [-o <output file>]

# Options:
#   <top-level-folder> is the path to the top-level folder
#   -f just check but do not remove any files
#   -o the output file to write the <path-directory> of any node_modules found


import argparse
from pathlib import Path
import os
import shutil

def remove_all_in_directory(directory):
    for item in os.listdir(directory):
        try:
            item_path = os.path.join(directory, item)
            if os.path.isdir(item_path):
                # check if symbolic link
                if os.path.islink(item_path):
                    os.unlink(item_path)  # Remove symbolic link
                else:
                    shutil.rmtree(item_path)  # Remove directory and its contents
            else:
                os.remove(item_path)  # Remove file
        except Exception as e:
            print(f"Error removing {item_path}: {e}")


def find_and_process_dir(target_dir, fake=False, outputFlag=False, output_file=""):
    f = None
    if outputFlag:
        f = open(output_file, "w")

    all_entries = get_all_entries(target_dir)
    # iterate through all entries in all_entries
    for entry in all_entries:
        # check if the entry is a directory
        if entry.is_dir():
            # check if the entry is a node_modules directory
            if entry.name == "node_modules":
                # check if the fake flag is set
                if fake:
                    if f:
                        f.write(f"Should process everything in {entry}\n")
                else:
                    if f:
                        f.write(f"Processing everything in {entry}\n")
                    remove_all_in_directory(entry)
            else:
                # recursively search in the child directory for node_modules
                find_and_process_dir(entry, fake, outputFlag, output_file)
        # print a progress dot
        print(".", end="", flush=True)
    if f:
        f.flush()
        f.close()

# function that returns list of files and directories in target_directory
def get_all_entries(target_directory):
    all_entries = []
    for entry in target_directory.iterdir():
        all_entries.append(entry)
    return all_entries


# Obtain the CLI arguments
parser = argparse.ArgumentParser()

parser.add_argument("path")
parser.add_argument("-f", "--fake", action="store_true", default=False)
parser.add_argument("-o", "--output_file", default="")
args = parser.parse_args()

# Obtain the input arguments provided by the user
target_dir = Path(args.path)
is_fake = args.fake
output_file = args.output_file
outputFlag = True
if output_file == "":
    outputFlag = False

# check if the target directory exists
if not target_dir.exists():
    print("The target directory doesn't exist")
    raise SystemExit(1)

# check if the target directory is a directory
if not target_dir.is_dir():
    print("The target directory is not a directory")
    raise SystemExit(1)

# Obtain list of all files and directories in the target directory
find_and_process_dir(target_dir, is_fake, outputFlag, output_file)
print("\nDone...")